{"version":3,"file":"3fcb211ffa9757ec3a9d8588d623c6f608ce08c0-151eaee4aeff835ec45c.js","mappings":"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","sources":["webpack://hikun-blog/./node_modules/camelcase/index.js","webpack://hikun-blog/./node_modules/react-icons/lib/esm/iconsManifest.js","webpack://hikun-blog/./node_modules/react-icons/lib/esm/iconContext.js","webpack://hikun-blog/./node_modules/react-icons/lib/esm/iconBase.js","webpack://hikun-blog/../src/image-utils.ts","webpack://hikun-blog/../src/components/hooks.ts","webpack://hikun-blog/../src/components/picture.tsx","webpack://hikun-blog/../src/components/layout-wrapper.tsx","webpack://hikun-blog/../src/components/placeholder.tsx","webpack://hikun-blog/../src/components/main-image.tsx","webpack://hikun-blog/../src/components/gatsby-image.browser.tsx","webpack://hikun-blog/../src/components/gatsby-image.server.tsx","webpack://hikun-blog/../src/components/static-image.server.tsx","webpack://hikun-blog/../src/components/static-image.tsx","webpack://hikun-blog/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://hikun-blog/./src/components/common/Header/Navigation.tsx","webpack://hikun-blog/./src/contexts/index.ts","webpack://hikun-blog/./src/components/common/Header/index.tsx","webpack://hikun-blog/./src/components/common/SmSizeBr.tsx"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","export var IconsManifest = [{\n  \"id\": \"fa\",\n  \"name\": \"Font Awesome\",\n  \"projectUrl\": \"https://fontawesome.com/\",\n  \"license\": \"CC BY 4.0 License\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n}, {\n  \"id\": \"io\",\n  \"name\": \"Ionicons 4\",\n  \"projectUrl\": \"https://ionicons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"io5\",\n  \"name\": \"Ionicons 5\",\n  \"projectUrl\": \"https://ionicons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"md\",\n  \"name\": \"Material Design icons\",\n  \"projectUrl\": \"http://google.github.io/material-design-icons/\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"https://github.com/google/material-design-icons/blob/master/LICENSE\"\n}, {\n  \"id\": \"ti\",\n  \"name\": \"Typicons\",\n  \"projectUrl\": \"http://s-ings.com/typicons/\",\n  \"license\": \"CC BY-SA 3.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n}, {\n  \"id\": \"go\",\n  \"name\": \"Github Octicons icons\",\n  \"projectUrl\": \"https://octicons.github.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/primer/octicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"fi\",\n  \"name\": \"Feather\",\n  \"projectUrl\": \"https://feathericons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/feathericons/feather/blob/master/LICENSE\"\n}, {\n  \"id\": \"gi\",\n  \"name\": \"Game Icons\",\n  \"projectUrl\": \"https://game-icons.net/\",\n  \"license\": \"CC BY 3.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/\"\n}, {\n  \"id\": \"wi\",\n  \"name\": \"Weather Icons\",\n  \"projectUrl\": \"https://erikflowers.github.io/weather-icons/\",\n  \"license\": \"SIL OFL 1.1\",\n  \"licenseUrl\": \"http://scripts.sil.org/OFL\"\n}, {\n  \"id\": \"di\",\n  \"name\": \"Devicons\",\n  \"projectUrl\": \"https://vorillaz.github.io/devicons/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"ai\",\n  \"name\": \"Ant Design Icons\",\n  \"projectUrl\": \"https://github.com/ant-design/ant-design-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"bs\",\n  \"name\": \"Bootstrap Icons\",\n  \"projectUrl\": \"https://github.com/twbs/icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"ri\",\n  \"name\": \"Remix Icon\",\n  \"projectUrl\": \"https://github.com/Remix-Design/RemixIcon\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"http://www.apache.org/licenses/\"\n}, {\n  \"id\": \"fc\",\n  \"name\": \"Flat Color Icons\",\n  \"projectUrl\": \"https://github.com/icons8/flat-color-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"gr\",\n  \"name\": \"Grommet-Icons\",\n  \"projectUrl\": \"https://github.com/grommet/grommet-icons\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"http://www.apache.org/licenses/\"\n}, {\n  \"id\": \"hi\",\n  \"name\": \"Heroicons\",\n  \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"si\",\n  \"name\": \"Simple Icons\",\n  \"projectUrl\": \"https://simpleicons.org/\",\n  \"license\": \"CC0 1.0 Universal\",\n  \"licenseUrl\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n}, {\n  \"id\": \"im\",\n  \"name\": \"IcoMoon Free\",\n  \"projectUrl\": \"https://github.com/Keyamoon/IcoMoon-Free\",\n  \"license\": \"CC BY 4.0 License\"\n}, {\n  \"id\": \"bi\",\n  \"name\": \"BoxIcons\",\n  \"projectUrl\": \"https://github.com/atisawd/boxicons\",\n  \"license\": \"CC BY 4.0 License\"\n}, {\n  \"id\": \"cg\",\n  \"name\": \"css.gg\",\n  \"projectUrl\": \"https://github.com/astrit/css.gg\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"vsc\",\n  \"name\": \"VS Code Icons\",\n  \"projectUrl\": \"https://github.com/microsoft/vscode-codicons\",\n  \"license\": \"CC BY 4.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n}, {\n  \"id\": \"tb\",\n  \"name\": \"Tabler Icons\",\n  \"projectUrl\": \"https://github.com/tabler/tabler-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}];","import React from 'react';\nexport var DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nexport var IconContext = React.createContext && React.createContext(DefaultContext);","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { IconContext, DefaultContext } from './iconContext';\n\nfunction Tree2Element(tree) {\n  return tree && tree.map(function (node, i) {\n    return React.createElement(node.tag, __assign({\n      key: i\n    }, node.attr), Tree2Element(node.child));\n  });\n}\n\nexport function GenIcon(data) {\n  return function (props) {\n    return React.createElement(IconBase, __assign({\n      attr: __assign({}, data.attr)\n    }, props), Tree2Element(data.child));\n  };\n}\nexport function IconBase(props) {\n  var elem = function elem(conf) {\n    var attr = props.attr,\n        size = props.size,\n        title = props.title,\n        svgProps = __rest(props, [\"attr\", \"size\", \"title\"]);\n\n    var computedSize = size || conf.size || \"1em\";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + ' ' : '') + props.className;\n    return React.createElement(\"svg\", __assign({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: __assign(__assign({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), title && React.createElement(\"title\", null, title), props.children);\n  };\n\n  return IconContext !== undefined ? React.createElement(IconContext.Consumer, null, function (conf) {\n    return elem(conf);\n  }) : elem(DefaultContext);\n}","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import styled from '@emotion/styled';\nimport { Theme } from 'assets/styles/theme';\nimport { useBlogSettingsContext } from 'contexts';\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport useUtils from 'hooks/useUtils';\nimport Button from 'components/Button';\nimport { MdOutlineWbSunny as LightThemeIcon, MdMenu as HambergerIcon } from 'react-icons/md';\nimport { RiMoonFill as DarkThemeIcon } from 'react-icons/ri';\nimport Typography from 'components/Typography';\nimport { Link } from 'gatsby';\nimport mixins from 'assets/styles/mixins';\n\ntype NavigationComponentProps = {\n  theme: Theme;\n};\nconst NavigationComponent = styled('nav')(() => ({\n  width: '100%',\n  position: 'fixed',\n  top: 0,\n  zIndex: 10,\n  borderWidth: 0,\n  background: 'transparent',\n  backdropFilter: 'initial',\n  transition: 'background-color 0.25s ease, border-color 0.25s ease, color 0.25s ease',\n  willChange: 'color, background-color, border-color, backdrop-filter',\n\n  '&.is-active': {\n    borderBottom: `1px solid var(--hr-color)`,\n    backgroundColor: 'var(--nav-background-color)',\n    backdropFilter: 'blur(3px)',\n    'h1, span': { color: 'var(--text-color)' },\n    '.nav-button': {\n      color: `var(--text-color)`,\n    },\n  },\n}));\n\nconst NaviWrap = styled('div')(({ theme }: NavigationComponentProps) => ({\n  display: 'flex',\n  alignItems: 'center',\n  maxWidth: theme.size.siteWidth,\n  margin: '0 auto',\n  padding: '10px 20px',\n\n  h1: {\n    color: 'var(--gray-050)',\n    margin: 0,\n  },\n  '.nav-button': {\n    borderRadius: '50%',\n    background: 'transparent',\n    height: 34,\n    width: 34,\n    border: 0,\n    color: `var(--gray-050)`,\n    padding: '6px 0',\n    textAlign: 'center',\n    '&.hamberger': {\n      display: 'none',\n      [mixins.breakpoints.md]: {\n        display: 'block',\n      },\n    },\n  },\n\n  [mixins.breakpoints.md]: {\n    justifyContent: 'space-between',\n  },\n}));\n\nconst Logo = styled(Link)(() => ({\n  marginRight: '30px',\n  [mixins.breakpoints.md]: {\n    margin: 0,\n  },\n}));\n\nconst MenuWrap = styled('ul')(() => ({\n  display: 'flex',\n  [mixins.breakpoints.md]: {\n    display: 'none',\n    flexDirection: 'column',\n    position: 'absolute',\n    width: '100%',\n    top: 55,\n    left: 0,\n    '&.is-open': {\n      display: 'block',\n    },\n  },\n}));\n\nconst MenuItem = styled('li')(() => ({\n  listStyle: 'none',\n  padding: '0 10px',\n  a: {\n    transition: 'border-bottom 0.15s ease, color 0.25s ease',\n\n    span: {\n      color: 'var(--gray-050)',\n    },\n    '&:hover': {\n      span: {\n        color: 'var(--info)',\n        textShadow: '0 2px 8px 0 var(--black-100)',\n      },\n      borderBottom: '3px solid var(--info)',\n    },\n  },\n\n  [mixins.breakpoints.md]: {\n    width: '100%',\n    padding: '8px 10px',\n    backgroundColor: 'var(--nav-background-color)',\n\n    a: {\n      display: 'block',\n      padding: '5px 10px',\n      span: {\n        color: 'var(--text-color)',\n      },\n      '&:hover': {\n        span: {\n          color: 'var(--white-100)',\n        },\n        borderBottom: 0,\n        borderRadius: 10,\n        backgroundColor: 'var(--info)',\n      },\n    },\n  },\n}));\n\nconst Space = styled('div')(() => ({\n  flexGrow: 1,\n  [mixins.breakpoints.md]: {\n    display: 'none',\n  },\n}));\n\nconst ModeChangeButton = memo(() => {\n  const { isDarkMode, setDarkMode } = useBlogSettingsContext();\n  return (\n    <Button\n      variant=\"none\"\n      themeColor=\"gray\"\n      size=\"tiny\"\n      className=\"nav-button\"\n      onClick={() => setDarkMode && setDarkMode(!isDarkMode)}\n    >\n      {isDarkMode ? <LightThemeIcon size={20} /> : <DarkThemeIcon size={20} />}\n    </Button>\n  );\n});\n\ninterface NavigationProps {\n  className?: string;\n}\nconst Navigation: React.FC<NavigationProps> = ({ className }) => {\n  const { useClassName } = useUtils();\n  const [isScroll, setIsScroll] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleFollow = useCallback(() => {\n    if (window?.scrollY > 0) setIsScroll(true);\n    else setIsScroll(false);\n  }, []);\n\n  useEffect(() => {\n    handleFollow();\n    window?.addEventListener('scroll', handleFollow);\n    return () => {\n      window?.removeEventListener('scroll', handleFollow);\n    };\n  }, []);\n\n  return (\n    <NavigationComponent className={useClassName([isScroll || isOpen ? 'is-active' : ''])}>\n      <NaviWrap className={className}>\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          variant=\"none\"\n          themeColor=\"gray\"\n          size=\"tiny\"\n          className={useClassName(['nav-button', 'hamberger'])}\n        >\n          <HambergerIcon size={20} />\n        </Button>\n        <Logo title=\"Home\" to=\"/\">\n          <Typography variant=\"subhead-subhead1\" as=\"h1\">\n            개발자 이희현\n          </Typography>\n        </Logo>\n        <MenuWrap className={useClassName([!isOpen || 'is-open'])}>\n          <MenuItem>\n            <Link title=\"About\" to=\"/about\">\n              <Typography variant=\"subhead-subhead4\">ABOUT</Typography>\n            </Link>\n          </MenuItem>\n          <MenuItem>\n            <Link title=\"Style guide\" to=\"/guide\">\n              <Typography variant=\"subhead-subhead4\">STYLE GUIDE</Typography>\n            </Link>\n          </MenuItem>\n        </MenuWrap>\n        <Space />\n        <ModeChangeButton />\n      </NaviWrap>\n    </NavigationComponent>\n  );\n};\nexport default Navigation;\n","import { BlogSettingsContext } from 'hooks/useBlogSettings';\nimport { useContext } from 'react';\n\nexport const useBlogSettingsContext = () => {\n  return useContext(BlogSettingsContext);\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport mixins from 'assets/styles/mixins';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport Typography from 'components/Typography';\nimport useUtils from 'hooks/useUtils';\nimport { Theme } from 'assets/styles/theme';\nimport Navigation from 'components/common/Header/Navigation';\nimport SmSizeBr from 'components/common/SmSizeBr';\nimport { keyframes } from '@emotion/react';\ntype HeaderComponentProps = { theme: Theme };\nconst HeaderComponent = styled('header')(() => ({\n  display: 'flex',\n  position: 'relative',\n  height: 600,\n  overflow: 'hidden',\n  [mixins.breakpoints.md]: {\n    height: 400,\n  },\n  [mixins.breakpoints.sm]: {\n    height: 320,\n  },\n}));\n\nconst HeaderImageWrap = styled('div')(() => ({\n  width: '100%',\n  height: '100%',\n  position: 'absolute',\n  animation: `${keyframes`\n    from { transform: scale(1.1) }\n    to { transform: scale(1) }\n  `} 1s ease-in forwards`,\n\n  '&::after': {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    top: 0,\n    display: 'block',\n    content: '\"\"',\n    animation: `${keyframes`\n      from { backdrop-filter: brightness(1.1) blur(0px); }\n      to { backdrop-filter: brightness(0.8) blur(2px); }\n    `} 2s ease-out forwards;`,\n  },\n}));\n\nconst HeaderTextArea = styled('div')(({ theme }: HeaderComponentProps) => ({\n  width: theme.size.siteWidth,\n  margin: '0 auto',\n  padding: '25rem 20px 0',\n  position: 'relative',\n  zIndex: 3,\n  color: 'var(--gray-050)',\n  [mixins.breakpoints.md]: {\n    padding: '15rem 20px 0',\n  },\n  [mixins.breakpoints.sm]: {\n    padding: '7.5rem 20px 0',\n  },\n}));\n\ninterface HeaderProps {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  navigationClassName?: string;\n  headerClassName?: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ navigationClassName = '', headerClassName = '', ...props }) => {\n  const { useClassName } = useUtils();\n  const {\n    title = (\n      <>\n        이희현의 <SmSizeBr />\n        제멋대로 블로그\n      </>\n    ),\n    description = (\n      <>\n        The difference <SmSizeBr />\n        between a dream and a goal <SmSizeBr />\n        is a plan\n      </>\n    ),\n  } = props;\n\n  return (\n    <>\n      <Navigation className={useClassName([navigationClassName])} />\n      <HeaderComponent className={useClassName([headerClassName])}>\n        <HeaderImageWrap>\n          <StaticImage\n            css={{ width: '100%', height: '100%' }}\n            src=\"../../../assets/images/header-background.jpg\"\n            layout=\"constrained\"\n            alt=\"header background image\"\n          />\n        </HeaderImageWrap>\n        <HeaderTextArea>\n          <Typography\n            css={{\n              animation: `${keyframes`from { width: 1% } to { width: 100% }`} 0.5 ease-out`,\n            }}\n            themeColor=\"gray-100\"\n            variant=\"headline-h1\"\n            md=\"headline-h2\"\n            sm=\"headline-h3\"\n            as=\"h1\"\n          >\n            {title}\n          </Typography>\n          <Typography\n            themeColor=\"gray-300\"\n            variant=\"subhead-subhead4\"\n            md=\"subhead-subhead6\"\n            sm=\"subhead-subhead8\"\n            as=\"h3\"\n          >\n            {description}\n          </Typography>\n        </HeaderTextArea>\n      </HeaderComponent>\n    </>\n  );\n};\nexport default Header;\n","import styled from '@emotion/styled';\nimport mixins from 'assets/styles/mixins';\n\nconst SmSizeBr = styled('br')(() => ({\n  display: 'none',\n  [mixins.breakpoints.sm]: {\n    display: 'initial',\n  },\n}));\nexport default SmSizeBr;\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","DefaultContext","color","undefined","size","className","style","attr","IconContext","__assign","t","s","n","arguments","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","Tree2Element","tree","node","tag","key","child","GenIcon","data","props","IconBase","elem","conf","title","svgProps","computedSize","stroke","fill","strokeWidth","height","width","xmlns","children","Consumer","hasNativeLazyLoadSupport","HTMLImageElement","format","getMainProps","isLoading","isLoaded","images","loading","shouldLoad","opacity","getPlaceholderProps","placeholder","layout","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","result","transition","output","fallbackImage","Sizer","React","paddingTop","maxWidth","display","alt","role","src","LayoutWrapper","Fragment","q","H","Image","srcSet","decoding","Picture","fallback","sources","sizes","media","type","propTypes","PropTypes","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","renderImageToStringPromise","renderImage","altValidator","rest","image","imageCache","Set","GatsbyImageHydrator","onError","as","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","root","useRef","cacheKey","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","animationFrame","cleanupCallback","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","onLoadListener","removeEventListener","add","has","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","createElement","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","warn","checkDimensionProps","validLayouts","StaticImage","GatsbyImageBrowser","__error","imageData","__imageData","console","_taggedTemplateLiteralLoose","strings","raw","NavigationComponent","zIndex","borderWidth","background","backdropFilter","willChange","borderBottom","NaviWrap","alignItems","theme","siteWidth","margin","padding","h1","borderRadius","border","textAlign","mixins","justifyContent","Logo","Link","marginRight","MenuWrap","flexDirection","MenuItem","listStyle","a","span","textShadow","Space","flexGrow","ModeChangeButton","useContext","BlogSettingsContext","isDarkMode","setDarkMode","___EmotionJSX","Button","variant","themeColor","onClick","LightThemeIcon","DarkThemeIcon","useClassName","useUtils","useState","isScroll","setIsScroll","isOpen","setIsOpen","handleFollow","useCallback","window","scrollY","HambergerIcon","to","Typography","HeaderComponent","HeaderImageWrap","animation","keyframes","content","HeaderTextArea","navigationClassName","headerClassName","SmSizeBr","description","Navigation","css","md","sm"],"sourceRoot":""}