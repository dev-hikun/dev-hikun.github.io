{"componentChunkName":"component---src-posts-index-tsx","path":"/posts/Electron + React + Typescript 데스크탑 앱 개발 시작해보기","result":{"data":{"markdownRemark":{"html":"<p>회사에서 윈도우프로그램과 웹 소켓으로 통신하는 데스크탑 프로그램을 만드는 프로젝트를 맡게 되었다.\n(필자는 이 프로젝트를 시작함과 동시에 '오예 블로그에 쓸거 생겼다' 라는 생각에 들떴다는건 비밀)</p>\n<p>이에 본인의 기록용 포스팅이라는 베이스를 두고 누군가 필요한 사람을 위해 강좌 형식으로 적도록 하겠다.\n<del>본디 기록용 포스팅 일 뿐이어서, 불친절한 시리즈인건 안비밀</del></p>\n<h1>0. 본 포스팅에 사용 된 버전</h1>\n<p>필자는 yarn이 아닌 npm을 주로 사용한다.</p>\n<p><strong>사용된 버전</strong>\nnode:  v12.20.0\nnpm, npx:  v6.14.8\nreact : 17.0.1\nelectron-is-dev: 1.2.0\nelectron: 11.2.0\nelectron-builder: 22.9.1\ntypescript: 4.1.3\nwait-on: 5.2.1\ncross-env: 7.0.3\nconcurrently: 5.3.0</p>\n<h1>1. React App 생성</h1>\n<pre><code>npx create-react-app 앱이름 --template typescript\n</code></pre>\n<p>npm이 아닌 npx로 앱을 생성한다. npx를 사용하면 최신버전의 CRA로 React가 실행되는 환경을 만들 수 있다.\n우리는 타입스크립트를 사용할 것이기 때문에 뒤에 뒤에 _<code>--template typescript</code>_는 필수.</p>\n<blockquote>\n<p><a href=\"https://velog.io/@kimkyeseung/%EB%B2%88%EC%97%AD-%EA%B7%B8%EB%9E%98-npx-npm%EB%A7%90%EA%B3%A0-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%84%A4%EB%AA%85\">참조: npm과 npx의 차이점</a></p>\n</blockquote>\n<h1>2. Electron 설치</h1>\n<p>react 프로젝트가 성공적으로 생성 되었다면,\n해당 앱 폴더로 이동하여 Electron과 각종 개발에 편의성을 주는 도구들을 설치한다.</p>\n<pre><code>npm i electron-is-dev\nnpm i electron electron-builder concurrently cross-env wait-on typescript --save-dev\n</code></pre>\n<p>해당 모듈들은 (electron-is-dev 제외) 런타임에서 사용되지 않을 개발용 모듈이므로 <em><code>--save-dev</code></em> 인수를 추가해준다.</p>\n<ul>\n<li><strong><code>Electron-is-dev</code></strong>: 개발환경인지 빌드한 프로덕션환경인지 확인을 위하여 사용됨.</li>\n<li><strong><code>Electron</code></strong> : 일렉트론을 실행하기 위해서 사용됨.</li>\n<li><strong><code>Electron-builder</code></strong> : 일렉트론을 실제 프로덕션 버전으로 빌드하기 위해 사용됨.</li>\n<li><strong><code>concurrently</code></strong> : 동시에 여러 명령어를 사용(병렬적으로)하기 위해 사용됨.</li>\n<li><strong><code>cross-env</code></strong> : 프로그램을 CLI환경에서 실행 시킬 때에, OS에 관계 없이 환경변수를 설정할 수 있도록 하기 위해 사용됨.</li>\n<li><a href=\"https://github.com/jeffbski/wait-on#readme\"><strong><code>wait-on</code></strong></a> : HTTP 자원, port, file등이 활성화 될 때 까지 기다려주는 cross platform</li>\n<li><strong><code>typescript</code></strong> : typescript</li>\n</ul>\n<p><del>tsconfig는 각자 알아서 작성하시길....</del></p>\n<h1>3. Electron을 실행하는 코드작성</h1>\n<p>위에서 모든것이 완료되었다면, public 폴더 안에 Electron을 실행하는 ts파일을 하나 작성해준다.</p>\n<pre><code class=\"language-TYPESCRIPT\">import { app, BrowserWindow } from 'electron';\nimport * as isDev from 'electron-is-dev';\nimport * as path from 'path';\n\nlet mainWindow: BrowserWindow;\n\nconst createWindow = () => {\n  mainWindow = new BrowserWindow({\n    width: 900,\n    height: 680,\n    center: true,\n    kiosk: !isDev,\n    resizable: true,\n    fullscreen: false,\n    fullscreenable: true,\n    webPreferences: {\n      // node환경처럼 사용하기\n      nodeIntegration: true,\n      enableRemoteModule: true,\n      // 개발자도구\n      devTools: isDev,\n    },\n  });\n\n  // production에서는 패키지 내부 리소스에 접근.\n  // 개발 중에는 개발 도구에서 호스팅하는 주소에서 로드.\n  mainWindow.loadURL(isDev ? 'http://localhost:3000' : `file://${path.join(__dirname, '../build/index.html')}`);\n\n  if (isDev) {\n    mainWindow.webContents.openDevTools({ mode: 'detach' });\n  }\n\n  mainWindow.setResizable(true);\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', () => (mainWindow = undefined!));\n  mainWindow.focus();\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n</code></pre>\n<h1>4. package.json 파일 수정</h1>\n<p>프로젝트 파일 내의 <code>package.json</code> 파일을 다음과 같이 수정해준다.</p>\n<pre><code class=\"language-JSON\">{\n  ...\n  \"main\": \"public/electron.js\",\n  \"homepage\": \"./\",\n  \"scripts\": {\n    \"react-start\": \"react-scripts start\",\n    \"react-build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"start\": \"tsc ./public/electron.ts &#x26;&#x26; concurrently \\\"cross-env BROWSER=none npm run react-start\\\" \\\"wait-on http://localhost:3000 &#x26;&#x26; electron .\\\"\",\n    \"build\": \"npm run react-build &#x26;&#x26; electron-builder\",\n    \"release\": \"npm run react-build &#x26;&#x26; electron-builder --publish=always\",\n    \"lint\": \"eslint './src**/*.{ts,tsx}'\"\n  },\n  ...\n}\n\n</code></pre>\n<p><strong>main</strong> : 프로그램의 진입점이므로 꼭 설정해주어야함. 일렉트론을 실행하는 코드이다.\n<strong>scripts</strong> :</p>\n<ul>\n<li><strong>[start]</strong> : electron.ts를 js파일로 변환해 준 후, concurrently를 통해 browser로 띄우지 않고 리액트를 실행시킨 후 <a href=\"http://localhost:3000%EC%9D%B4\">http://localhost:3000이</a> 로드가 완료되면 electron을 실행시킨다.</li>\n<li><strong>[build]</strong> : <code>dist</code>폴더에 production 실행파일을 생성해준다.</li>\n<li><strong>[release]</strong> : build명령어와 같지만 그 후 배포를 해준다. (추가설정 필요)</li>\n</ul>\n<h1>5. 실행</h1>\n<p><code>npm run start</code>를 터미널에 입력해주면 다음과 같이 앱이 뜨고, 가운데 리액트 마크가 <del>삥글삥글</del> 돈다면 성공적으로 완료되었다.\n<img src=\"https://images.velog.io/images/dev_hikun/post/20a15d05-391b-4cc8-b7e0-be3bce8e1ead/image.png\" alt=\"일렉트론이 실행된 이미지\"></p>","frontmatter":{"title":"Electron + React + Typescript 데스크탑 앱 개발 시작해보기","date":"2021-01-14","slug":"/posts/Electron + React + Typescript 데스크탑 앱 개발 시작해보기","tags":["React","Typescript","Electron"],"featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#283848","images":{"fallback":{"src":"/static/6d4b7b0ad2adf67d4d0608e5b97c6bd9/1624f/electron-logo.png","srcSet":"/static/6d4b7b0ad2adf67d4d0608e5b97c6bd9/aeb79/electron-logo.png 400w,\n/static/6d4b7b0ad2adf67d4d0608e5b97c6bd9/47126/electron-logo.png 800w,\n/static/6d4b7b0ad2adf67d4d0608e5b97c6bd9/1624f/electron-logo.png 1600w","sizes":"(min-width: 1600px) 1600px, 100vw"},"sources":[{"srcSet":"/static/6d4b7b0ad2adf67d4d0608e5b97c6bd9/dff21/electron-logo.webp 400w,\n/static/6d4b7b0ad2adf67d4d0608e5b97c6bd9/b2a35/electron-logo.webp 800w,\n/static/6d4b7b0ad2adf67d4d0608e5b97c6bd9/e9d78/electron-logo.webp 1600w","type":"image/webp","sizes":"(min-width: 1600px) 1600px, 100vw"}]},"width":1600,"height":900}}}}}},"pageContext":{"slug":"/posts/Electron + React + Typescript 데스크탑 앱 개발 시작해보기"}},"staticQueryHashes":[]}